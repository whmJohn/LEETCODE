class Solution {
public:
    vector<vector<int>> res;
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        backtrack(nums,res,0);
        return res;
    }
    
    void swap(int &a,int &b) {
        int temp;
        temp=a;
        a=b;
        b=temp;
    }
    void backtrack(vector<int> &nums,vector<vector<int>> &res,int i) {
        if(i==nums.size()) {
            vector<vector<int>>::iterator iter = find(res.begin(), res.end(), nums);
            if (iter == res.end()) {
                res.push_back(nums);
            }
            return;
        }
        for(int j=i;j<nums.size();j++) {
            if (j == i || nums[j] != nums[j-1])
            swap(nums[i],nums[j]);
            backtrack(nums,res,i+1);
            swap(nums[i],nums[j]);
        }
    }
};
