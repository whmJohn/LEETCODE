Solution 1
#暴力法
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        int size = nums.size();
        for (int i = 0; i < size; i++) {
            if(nums[i] > 0) {
                break;
            }
            for (int j = i + 1; j < size; j++) {
                for (int m = j + 1;m < size; m++) {
                    if(nums[m] < 0) {
                        continue;
                    }
                    if (nums[i] + nums[j] + nums[m] == 0) {
                        int p = 0;
                        vector<int> temp = {nums[i], nums[j], nums[m]};
                        for (int z = 0; z < result.size(); z++ ) {
                            sort(temp.begin(), temp.end());
                            sort(result[z].begin(), result[z].end());
                            if (temp == result[z]) {
                                p = 1;
                                break;
                            }
                        }
                        if (!p) {
                            result.push_back(temp);
                        }
                    }
                    else if (nums[i] + nums[j] + nums[m] > 0) {
                        break;
                    }
                }
            }
        }
        return result;
    }
};



Solution 2
#双指针法
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        if(nums.size() < 3 || nums.front() > 0 || nums.back() < 0) 
            return {};
        vector<vector<int>> res;
        for(int i = 0; i < nums.size(); i++) {
            int fix = nums[i];
            if(fix > 0) break;
            if(i > 0 && fix == nums[i-1])
                continue;
            int l = i + 1;
            int r = nums.size() - 1;
            while(l < r) {
                if(nums[l] + nums[r] == -fix)
                {
                    if(l == i + 1 || r == nums.size() -1) { //记录下相同元素出现的情况，只加入一次
                        res.push_back(vector<int>{nums[i], nums[l], nums[r]});
                        l++;
                        r--;
                    }
                    else if(nums[l] == nums[l - 1])
                        l++;
                    else if(nums[r] == nums[r + 1])
                        r--;
                    else { //不存在相同元素情况，直接加入res
                        res.push_back(vector<int>{nums[i], nums[l], nums[r]});
                        l++;
                        r--;
                    }
                }
                else if(nums[l] + nums[r] < -fix)
                    l++;
                else r--;
            }
        }
        return res;
    }
};
