class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int> S;
        int max = 0;
        int size = s.size();
        S.push(-1); //最开始以第一个字符为起点开始算
        for (int i = 0; i < size; i++) {
            if (s[i] == '(') {
                S.push(i); //作为起点位置
            }
            else {
                S.pop();
                if (S.empty()) {
                    S.push(i); //挼弹出后栈为空，那么将该位置作为起点
                }
                else {
                    if (max < i - S.top()) {
                        max = i - S.top(); //每一次计算都是对应的（之前的位置的值，此时计算的才是有效长度
                    }
                }
            }
        }
        return max;
    }
};
