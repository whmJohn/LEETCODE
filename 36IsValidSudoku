//暴力搜索法C++
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        //判断行是否无效
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                for (int u = j + 1; u < 9; u++) {
                    if (board[i][u] == '.') {
                        continue;
                    }
                    if (board[i][j] == board[i][u]) {
                        return false;
                    }
                }
            }
        }
        //判断列是否无效
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[j][i] == '.') {
                    continue;
                }
                for (int u = j + 1; u < 9; u++) {
                    if (board[u][i] == '.') {
                        continue;
                    }
                    if (board[j][i] == board[u][i]) {
                        return false;
                    }
                }
            }
        }
        //判断小方块是否无效
        for (int i = 0; i < 9; i = i + 3) {
            for (int j = 0; j < 9; j = j + 3) {
                for (int o = 0; o < 3; o++) {
                    for (int p = 0; p < 3; p++) {
                        if (board[i+o][j+p] == '.') {
                            continue;
                        }
                        for (int q = o; q < 3; q++) {
                            int w = 0;
                            if (q == o) {
                                w = p + 1;
                            }
                            else
                                w = 0;
                            for (; w < 3; w++) {
                                if (board[i+q][j+w] == '.') {
                                    continue;
                                }
                                if (board[i+o][j+p] == board[i+q][j+w]) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
};

//一次遍历法java
class Solution {
  public boolean isValidSudoku(char[][] board) {
    // init data
    HashMap<Integer, Integer> [] rows = new HashMap[9];
    HashMap<Integer, Integer> [] columns = new HashMap[9];
    HashMap<Integer, Integer> [] boxes = new HashMap[9];
    for (int i = 0; i < 9; i++) {
      rows[i] = new HashMap<Integer, Integer>();
      columns[i] = new HashMap<Integer, Integer>();
      boxes[i] = new HashMap<Integer, Integer>();
    }

    // validate a board
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        char num = board[i][j];
        if (num != '.') {
          int n = (int)num;
          int box_index = (i / 3 ) * 3 + j / 3;

          // keep the current cell value
          rows[i].put(n, rows[i].getOrDefault(n, 0) + 1);
          columns[j].put(n, columns[j].getOrDefault(n, 0) + 1);
          boxes[box_index].put(n, boxes[box_index].getOrDefault(n, 0) + 1);

          // check if this value has been already seen before
          if (rows[i].get(n) > 1 || columns[j].get(n) > 1 || boxes[box_index].get(n) > 1)
            return false;
        }
      }
    }

    return true;
  }
}




