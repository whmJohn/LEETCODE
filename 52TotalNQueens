class Solution {
    int sum = 0;
    bool isValid(vector<string> &v, int row, int col){
        bool valid=true;
        for(int i=0; valid && i<row; valid=v[i++][col]!='Q');
        for(int i=0; valid && i<col; valid=v[row][i++]!='Q');
        for(int i=row, j=col; valid && i-- && j--; valid=v[i][j]!='Q');
        for(int i=row, j=col; valid && i-- && ++j<v.size(); valid=v[i][j]!='Q');
        return valid;
    }
    void backtrack(vector<string> &v, int row) {
        if(row==v.size()) {
            sum++;
            return;
        }
        for(int col=0; col<v.size(); ++col) {
            v[row][col]='Q';
            if(isValid(v,row,col)) backtrack(v,row+1);
            v[row][col]='.';
        }
    }
public:
    int totalNQueens(int n) {
        vector<string> v(n,string(n,'.'));
        backtrack(v,0);
        return sum;
    }
};
