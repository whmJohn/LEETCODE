class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int size = int(nums.size());
        vector<int> path;
        for (int i = 1; i <= size; i++) {
            dfs(size, i, 0, path, nums);
        }
        vector<int> path1;
        res.push_back(path1);
        return res;
    }
    
private:
    vector<vector<int>> res;
    
    void dfs(int n, int k, int start, vector<int> &path, vector<int>& nums) {
        if (path.size() == k) {
            res.push_back(path);
            return;
        }
        for (int i = start; i <= n - (k - path.size()); i++) {
            path.push_back(nums[i]);
            dfs(n, k, i + 1, path, nums);
            path.pop_back();
        }
    }
    
};
